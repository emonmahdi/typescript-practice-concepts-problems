/* 
interface рж╣рж▓рзЛ ржЕржмржЬрзЗржХрзНржЯ ржмрж╛ ржХрзНрж▓рж╛рж╕рзЗрж░ рж╢рзЗржк/ржХржирзНржЯрзНрж░рж╛ржХрзНржЯ ржбрж┐ржлрж╛ржЗржи ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред
ржПржЯрж╛ ржЕржмржЬрзЗржХрзНржЯ, ржХрзНрж▓рж╛рж╕, ржлрж╛ржВрж╢ржи ржПрж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯред


тЬЕ Type Alias тЖТ ржпржЦржи union, tuple, primitive ржмрж╛ function ржЯрж╛ржЗржк ржХрж░рждрзЗ рж╣ржмрзЗред
тЬЕ Interface тЖТ ржпржЦржи ржЕржмржЬрзЗржХрзНржЯ ржмрж╛ ржХрзНрж▓рж╛рж╕рзЗрж░ рж╢рзЗржк ржбрж┐ржлрж╛ржЗржи ржХрж░рждрзЗ рж╣ржмрзЗ, ржПржмржВ extend/merge ржжрж░ржХрж╛рж░ рж╣ржмрзЗред


ЁЯСЙ рждрж╛рж╣рж▓рзЗ рж╕ржВржХрзНрж╖рзЗржкрзЗ ржмрж▓рж▓рзЗ: 
    type ржмрзЗрж╢рж┐ flexible 
    interface ржмрзЗрж╢рж┐ powerful object/class structure ржПрж░ ржЬржирзНржп

*/

interface IHeroInterface {
    name: string,
    age: number
}

type HeroType = {
    name:string,
    age: number
}

const heros1: IHeroInterface = {
    name:"kabir",
    age: 23
}
const heros2: HeroType = {
    name:"kabir",
    age: 23
}

/* 
ЁЯФ╣ Problem 3: Object Shape (Interface)

ЁЯСЙ ржПржХржЯрж┐ Student ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ ржмрж╛ржирж╛ржи ржпрзЗржЦрж╛ржирзЗ ржерж╛ржХржмрзЗ:

name: string 
roll: number 
isPassed: boolean

ржПрж░ржкрж░ ржПржХржЯрж┐ s1 ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рзБржиред
*/

interface Student {
    name: string,
    roll: number,
    isPassed: boolean
}

const s1: Student={
    name:'Saiful',
    roll: 32,
    isPassed: true
}