/* 
type alias ржХрж╛рж╕рзНржЯржо ржЯрж╛ржЗржк ржмрж╛ржирж╛рждрзЗ ржкрж╛рж░рж┐, ржЕржмржЬрзЗржХрзНржЯрзЗрж░ рж╢рзЗржк (shape), ржлрж╛ржВрж╢ржирзЗрж░ рж╕рж┐ржЧржирзЗржЪрж╛рж░, ржХрзНрж▓рж╛рж╕ ржХржиржЯрзНрж░рж╛ржХрзНржЯ ржЗрждрзНржпрж╛ржжрж┐ ржбрж┐ржлрж╛ржЗржи ржХрж░рждрзЗ ржкрж╛рж░рж┐ред
*/

type HeroSalaryType = number | string;

const heroSalary: HeroSalaryType = 2000;
console.log(heroSalary);

type HeroType = {
  name: string;
  age: number;
  isMarried: boolean;
};

const heroUser1: HeroType = {
  name: "Abir Mahmud",
  age: 32,
  isMarried: true,
};

const heroUser2: HeroType = {
  name: "Kabir Mahmud",
  age: 31,
  isMarried: false,
};

const heroUser3: HeroType = {
  name: "Akash Mahmud",
  age: 33,
  isMarried: false,
};

// Intersection type

type Personal = {
  name: string;
  age: number;
};

type Contact = {
  email: string;
  phone?: string; // optional
};

type Candidate = Personal & Contact;

let candidate: Candidate = {
  name: "Joe",
  age: 25,
  email: "joe@example.com",
  phone: "(408)-123-4567",
};

/* 
ЁЯФ╣ Problem 1: Primitive + Union (Type Alias)

ЁЯСЙ ржПржХржЯрж┐ UserID ржЯрж╛ржЗржк ржмрж╛ржирж╛ржи ржпрзЗржЯрж╛ рж╣рзЯ string ржЕржержмрж╛ number рж╣рждрзЗ ржкрж╛рж░рзЗред
ржПрж░ржкрж░ id1 ржПржмржВ id2 ржирж╛ржорзЗ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржмрж╛ржирж╛ржиред


*/

type UserId = string | number;

const id1: UserId = 122;
const id2: UserId = "122";

/*  
ЁЯФ╣ Problem 2: Object Shape (Type Alias)

ЁЯСЙ ржПржХржЯрж┐ Product ржЯрж╛ржЗржк ржмрж╛ржирж╛ржи ржпрзЗржЦрж╛ржирзЗ ржерж╛ржХржмрзЗ:

id: number 
name: string 
price: number 
inStock?: boolean (optional)
*/

type Product = {
  id: number;
  name: string;
  price: number;
  inStock?: boolean;
};


const p1: Product={
    id:21,
    name: 'Laptop',
    price:30000,
    inStock:true
}

